name: CI/CD

# IMPORTANT: Test Assets Security Notice
# =====================================
# This CI workflow excludes tests that depend on files in the test_assets/ directory
# as these files contain sensitive information and cannot be committed to the repository.
#
# Excluded Tests:
# - Rust integration tests that use load_test_file() function (automatically skipped via is_github_actions())
# - Performance tests gated behind "test-assets-performance" feature
# - Any test that reads from test_assets/*.json files
#
# For local development:
# - Place your test JSON files in test_assets/ directory (gitignored)
# - Run: cargo test --features test-assets-performance -- --nocapture
# - All excluded tests will run with local test assets
#
# Python tests do NOT use test_assets and run normally in CI.

on:
  push:
    branches: [ master, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ master, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Documentation job to inform about excluded tests
  test-exclusions-info:
    name: Test Exclusions Information
    runs-on: ubuntu-latest
    steps:
    - name: Display excluded tests information
      run: |
        echo "=== EXCLUDED TESTS INFORMATION ==="
        echo ""
        echo "The following tests are excluded from CI due to sensitive test_assets:"
        echo ""
        echo "Rust Tests (automatically skipped via is_github_actions()):"
        echo "  - test_real_json_edge_cases"
        echo "  - test_real_json_comprehensive_benchmark"
        echo "  - test_real_json_special_characters"
        echo "  - test_batch_processing_performance_with_real_data"
        echo "  - test_order_of_operations_performance_impact"
        echo "  - test_assets_performance_comprehensive (feature-gated)"
        echo ""
        echo "Files required for excluded tests:"
        echo "  - test_assets/test_0000.json through test_assets/test_0010.json"
        echo ""
        echo "To run these tests locally:"
        echo "  1. Place test JSON files in test_assets/ directory"
        echo "  2. Run: cargo test --verbose"
        echo "  3. Run: cargo test --features test-assets-performance -- --nocapture"
        echo ""
        echo "Python tests do NOT require test_assets and run normally in CI."
        echo "=================================="

  rust-tests:
    name: Rust Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Verify test_assets directory is excluded
      shell: bash
      run: |
        if [ -d "test_assets" ]; then
          echo "ERROR: test_assets directory found in repository!"
          echo "This directory should be gitignored for security reasons."
          ls -la test_assets/ || true
          exit 1
        else
          echo "âœ“ test_assets directory properly excluded from repository"
        fi

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache cargo dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Run Rust tests (excluding test_assets dependent tests)
      run: |
        # Run tests excluding integration tests that require test_assets
        # The is_github_actions() function will automatically skip tests that use load_test_file()
        cargo test --verbose --lib --bins

        # Run unit tests in the tests module, but skip integration tests
        # Integration tests that use test_assets will be skipped automatically via is_github_actions()
        cargo test --verbose integration_tests --no-fail-fast || echo "Some integration tests skipped due to missing test_assets (expected in CI)"
      env:
        GITHUB_ACTIONS: true

    - name: Run basic usage example
      run: cargo run --example basic_usage

    - name: Run advanced usage example
      run: cargo run --example advance_usage

  python-tests:
    name: Python Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13']

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache Python dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/.local/share/virtualenvs
        key: ${{ runner.os }}-python-${{ matrix.python-version }}-${{ hashFiles('requirements-dev.txt', 'pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-python-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Create virtual environment
      run: python -m venv .venv

    - name: Activate virtual environment (Unix)
      if: runner.os != 'Windows'
      run: echo "VIRTUAL_ENV_ACTIVATE=source .venv/bin/activate" >> $GITHUB_ENV

    - name: Activate virtual environment (Windows)
      if: runner.os == 'Windows'
      run: echo "VIRTUAL_ENV_ACTIVATE=.venv\Scripts\activate" >> $GITHUB_ENV

    - name: Build Python package
      shell: bash
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          .venv/Scripts/activate
        else
          source .venv/bin/activate
        fi
        maturin develop --features python

    - name: Run Python tests with coverage (no test_assets dependencies)
      shell: bash
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          .venv/Scripts/activate
        else
          source .venv/bin/activate
        fi
        # Python tests are self-contained and do not use test_assets directory
        pytest python/tests/ -v --cov=json_tools_rs --cov-report=xml --cov-report=term

    - name: Run Python examples
      shell: bash
      run: |
        if [ "${{ runner.os }}" = "Windows" ]; then
          .venv/Scripts/activate
        else
          source .venv/bin/activate
        fi
        python python/examples/basic_usage.py
        python python/examples/examples.py

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Rust dependencies for linting
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          target/
        key: ${{ runner.os }}-cargo-lint-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-lint-
          ${{ runner.os }}-cargo-

    - name: Check Rust formatting
      run: cargo fmt -- --check

    - name: Run Rust clippy (excluding test-assets-performance feature)
      run: |
        # Run clippy on main code and tests, but exclude test-assets-performance feature
        # since it requires test_assets files that are not available in CI
        cargo clippy --all-targets --features python -- -D warnings

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Cache Python linting dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-lint-${{ hashFiles('requirements-dev.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-lint-

    - name: Install Python linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black isort mypy

    - name: Check Python formatting with black
      run: black --check python/

    - name: Check Python import sorting with isort
      run: isort --check-only python/

    - name: Run mypy type checking
      run: mypy python/ --ignore-missing-imports

  # Build wheels for PyPI publishing
  build-wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: [rust-tests, python-tests, lint]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Build wheels
      uses: PyO3/maturin-action@v1
      with:
        args: --release --out dist --find-interpreter --features python
        sccache: 'true'
        manylinux: auto

    - name: Upload wheels
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}
        path: dist

  # Build source distribution
  build-sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: [rust-tests, python-tests, lint]

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Build sdist
      uses: PyO3/maturin-action@v1
      with:
        command: sdist
        args: --out dist --features python

    - name: Upload sdist
      uses: actions/upload-artifact@v4
      with:
        name: sdist
        path: dist

  # Publish to PyPI
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    needs: [build-wheels, build-sdist]
    environment:
      name: pypi
      url: https://pypi.org/p/json-tools-rs
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist
        merge-multiple: true

    - name: List artifacts
      run: ls -la dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true
