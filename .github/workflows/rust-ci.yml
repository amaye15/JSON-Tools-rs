name: Rust CI/CD

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Code quality and formatting checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy

    - name: Configure Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: quality

    - name: Configure crate-type for quality checks
      shell: bash
      run: |
        sed -i 's/^crate-type = .*/crate-type = ["rlib", "cdylib"]/' Cargo.toml
        echo "Updated Cargo.toml crate-type for quality checks:"
        grep "crate-type" Cargo.toml

    # - name: Check code formatting
    #   run: cargo fmt --all -- --check

    # - name: Run Clippy lints
    #   run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Check documentation
      run: cargo doc --no-deps --all-features --document-private-items
      env:
        RUSTDOCFLAGS: "-D warnings"

  # Core test suite
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta, nightly]
        include:
          - rust: nightly
            allow_failure: true
    continue-on-error: ${{ matrix.allow_failure || false }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}

    - name: Configure Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: test-${{ matrix.rust }}

    - name: Configure crate-type for testing
      shell: bash
      run: |
        sed -i 's/^crate-type = .*/crate-type = ["rlib", "cdylib"]/' Cargo.toml
        echo "Updated Cargo.toml crate-type for testing:"
        grep "crate-type" Cargo.toml

    - name: Build library
      run: cargo build --verbose

    - name: Build library with all features
      run: cargo build --verbose --all-features

    - name: Build binary
      run: cargo build --verbose --bin json-tools-rs

    - name: Run tests
      run: cargo test --verbose

    - name: Run tests with all features
      run: cargo test --verbose --all-features

    - name: Run examples
      run: |
        cargo run --example basic_usage
        cargo run --example advance_usage

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable

    - name: Configure Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: security

    - name: Install cargo-audit
      uses: taiki-e/install-action@cargo-audit

    - name: Run security audit
      run: cargo audit

  # MSRV check
  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain (MSRV)
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: 1.70.0  # Adjust based on your MSRV requirements

    - name: Configure Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: msrv

    - name: Configure crate-type for MSRV check
      shell: bash
      run: |
        sed -i 's/^crate-type = .*/crate-type = ["rlib", "cdylib"]/' Cargo.toml
        echo "Updated Cargo.toml crate-type for MSRV check:"
        grep "crate-type" Cargo.toml

    - name: Check MSRV compatibility
      run: cargo check --all-features

  # Cross-platform builds
  cross-platform:
    name: Cross Platform Build
    needs: [quality]
    strategy:
      fail-fast: false
      matrix:
        include:
          # Native x86_64 targets
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            can_test: true
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            can_test: true
          - os: macos-latest
            target: x86_64-apple-darwin
            can_test: true

          # ARM64 targets
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            can_test: false
          - os: macos-latest
            target: aarch64-apple-darwin
            can_test: true  # Apple Silicon runners can test ARM64
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            can_test: false

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable
        targets: ${{ matrix.target }}

    - name: Configure Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: cross-${{ matrix.os }}-${{ matrix.target }}

    - name: Install cross-compilation dependencies (Linux ARM64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Configure crate-type for cross-compilation
      shell: bash
      run: |
        # Use cdylib for all platforms to ensure Python bindings compatibility
        if [[ "${{ runner.os }}" == "macOS" ]]; then
          sed -i '' 's/^crate-type = .*/crate-type = ["rlib", "cdylib"]/' Cargo.toml
        else
          sed -i 's/^crate-type = .*/crate-type = ["rlib", "cdylib"]/' Cargo.toml
        fi
        echo "Updated Cargo.toml crate-type for ${{ matrix.target }}:"
        grep "crate-type" Cargo.toml

    - name: Build for ${{ matrix.target }}
      run: cargo build --verbose --target ${{ matrix.target }}

    - name: Test on ${{ matrix.target }}
      if: matrix.can_test
      run: cargo test --verbose --target ${{ matrix.target }}

  # Python bindings test
  python-bindings:
    name: Python Bindings Test
    runs-on: ubuntu-latest
    needs: [quality]
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable

    - name: Configure Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: python-${{ matrix.python-version }}

    - name: Configure crate-type for Python bindings
      shell: bash
      run: |
        sed -i 's/^crate-type = .*/crate-type = ["rlib", "cdylib"]/' Cargo.toml
        echo "Updated Cargo.toml crate-type for Python bindings:"
        grep "crate-type" Cargo.toml

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Build Python bindings
      run: maturin build --features python

    - name: Install built wheel
      run: pip install target/wheels/*.whl

    - name: Run Python tests
      run: python -m pytest python/tests/ -v

  # Code coverage (optional, runs on main branch)
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: [test]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable
        components: llvm-tools-preview

    - name: Configure Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: coverage

    - name: Configure crate-type for coverage
      shell: bash
      run: |
        sed -i 's/^crate-type = .*/crate-type = ["rlib", "cdylib"]/' Cargo.toml
        echo "Updated Cargo.toml crate-type for coverage:"
        grep "crate-type" Cargo.toml

    - name: Install cargo-llvm-cov
      uses: taiki-e/install-action@cargo-llvm-cov

    - name: Generate code coverage
      run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

    # - name: Upload coverage to Codecov
    #   uses: codecov/codecov-action@v4
    #   with:
    #     files: lcov.info
    #     fail_ci_if_error: false
    #     token: ${{ secrets.CODECOV_TOKEN }}


  # Build release wheels for PyPI
  build-wheels:
    name: Build Release Wheels
    runs-on: ${{ matrix.os }}
    needs: [test, cross-platform, python-bindings]
    # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            manylinux: auto
          # Linux ARM64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            manylinux: auto
          # Windows x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          # macOS x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
          # macOS ARM64 (Apple Silicon)
          - os: macos-latest
            target: aarch64-apple-darwin

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable
        targets: ${{ matrix.target }}

    - name: Configure Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: wheels-${{ matrix.os }}-${{ matrix.target }}

    - name: Setup QEMU (Linux ARM64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      uses: docker/setup-qemu-action@v3

    - name: Configure crate-type for wheel building
      shell: bash
      run: |
        if [[ "${{ runner.os }}" == "macOS" ]]; then
          sed -i '' 's/^crate-type = .*/crate-type = ["rlib", "cdylib"]/' Cargo.toml
        else
          sed -i 's/^crate-type = .*/crate-type = ["rlib", "cdylib"]/' Cargo.toml
        fi
        echo "Updated Cargo.toml crate-type for wheel building:"
        grep "crate-type" Cargo.toml

    - name: Build wheels
      uses: PyO3/maturin-action@v1
      with:
        command: build
        args: --release --features python --out dist --interpreter 3.9 3.10 3.11 3.12 3.13
        target: ${{ matrix.target }}
        manylinux: ${{ matrix.manylinux || 'auto' }}
        sccache: 'true'

    - name: Upload wheels as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}-${{ matrix.target }}
        path: dist/*.whl

  # Publish to PyPI
  publish-to-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build-wheels]
    # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    environment: pypi
    permissions:
      id-token: write  # Required for trusted publishing
      contents: read

    steps:
    - name: Download all wheel artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: wheels-*
        path: dist
        merge-multiple: true

    - name: List downloaded artifacts
      run: ls -la dist/

    # - name: Publish to PyPI
    #   uses: PyO3/maturin-action@v1
    #   with:
    #     command: upload
    #     args: --non-interactive --skip-existing dist/*
