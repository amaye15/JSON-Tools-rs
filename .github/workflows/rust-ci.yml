name: Rust CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Rust Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust:
          - stable
          - beta
          - nightly
        include:
          - rust: nightly
            allow_failure: true
    continue-on-error: ${{ matrix.allow_failure || false }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Configure Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.rust }}

    # - name: Check code formatting
    #   run: cargo fmt --all -- --check


    # - name: Run Clippy lints
    #   run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build library
      run: cargo build --verbose

    - name: Build library with all features
      run: cargo build --verbose --all-features

    - name: Build binary
      run: cargo build --verbose --bin json-tools-rs

    - name: Run tests
      run: cargo test --verbose

    - name: Run tests with all features
      run: cargo test --verbose --all-features

    - name: Run examples
      run: |
        cargo run --example basic_usage
        cargo run --example advance_usage

    - name: Build documentation
      run: cargo doc --no-deps --all-features

  # coverage:
  #   name: Code Coverage
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v4

  #   - name: Install Rust toolchain
  #     uses: dtolnay/rust-toolchain@v1
  #     with:
  #       toolchain: stable
  #       components: llvm-tools-preview

  #   - name: Configure Rust cache
  #     uses: Swatinem/rust-cache@v2

  #   - name: Install cargo-llvm-cov
  #     uses: taiki-e/install-action@cargo-llvm-cov

  #   - name: Generate code coverage
  #     run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

  #   - name: Upload coverage to Codecov
  #     uses: codecov/codecov-action@v3
  #     with:
  #       files: lcov.info
  #       fail_ci_if_error: false

  # security:
  #   name: Security Audit
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v4

  #   - name: Install Rust toolchain
  #     uses: dtolnay/rust-toolchain@v1
  #     with:
  #       toolchain: stable

  #   - name: Configure Rust cache
  #     uses: Swatinem/rust-cache@v2

  #   - name: Install cargo-audit
  #     run: cargo install cargo-audit

  #   - name: Run security audit
  #     run: cargo audit

  # msrv:
  #   name: Minimum Supported Rust Version
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v4

  #   - name: Install Rust toolchain (MSRV)
  #     uses: dtolnay/rust-toolchain@v1
  #     with:
  #       toolchain: 1.70.0  # Adjust based on your MSRV requirements

  #   - name: Configure Rust cache
  #     uses: Swatinem/rust-cache@v2
  #     with:
  #       key: msrv

  #   - name: Check MSRV compatibility
  #     run: cargo check --all-features

  cross-platform:
    name: Cross Platform Build
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest] # macos-latest
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable

    - name: Configure Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.os }}

    - name: Build on ${{ matrix.os }}
      run: cargo build --verbose

    - name: Test on ${{ matrix.os }}
      run: cargo test --verbose

  python-bindings:
    name: Python Bindings
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13']
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable

    - name: Configure Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: python-${{ matrix.python-version }}

    - name: Install maturin
      run: pip install maturin[patchelf]

    - name: Build Python bindings
      run: maturin build --features python

    - name: Install development dependencies
      run: pip install -r requirements-dev.txt

    - name: Install built wheel
      run: pip install target/wheels/*.whl

    - name: Run Python tests
      run: python -m pytest python/tests/ -v

  pypi-deploy:
    name: PyPI Deployment
    runs-on: ${{ matrix.os }}
    needs: [test, cross-platform, python-bindings]
    # if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12', '3.13']
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: macos-latest
            target: x86_64-apple-darwin

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable
        targets: ${{ matrix.target }}

    - name: Configure Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: pypi-${{ matrix.os }}-${{ matrix.python-version }}

    - name: Install maturin
      run: pip install maturin[patchelf]

    - name: Build wheels
      run: maturin build --release --features python --target ${{ matrix.target }} --out dist

    - name: Upload wheels as artifacts
      uses: actions/upload-artifact@v3
      with:
        name: wheels-${{ matrix.os }}-${{ matrix.python-version }}
        path: dist/*.whl

    # - name: Publish to PyPI
    #   if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
    #   env:
    #     MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
    #   run: maturin publish --features python
